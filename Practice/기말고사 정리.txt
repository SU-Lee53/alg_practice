1. 그리디 알고리즘 - 근시안적인 해결법
    1-1. 동전 선택 : 동전의 액면차이가 정수배
    1-2. 최소신장트리 : n개의 정점을 연결하기 위해서 n-1개의 선을 이용, 가중치가 최소
        - kruskal:
            - 간선을 정렬하는데 걸리는 시간 O(mlogm) (m은 입력 그래프에 잇는 간선의 수)
            - T(트리)를 초기화하는데 O(1)
            - 루프를 도는데 O(1)

        - Prim: 정점을 먼저 확정하고 주변의 간선들 중 가장 가중치가 작은것을 선택
            - Prim 알고리즘이 사이클이 없는이유 -> 만들어진 트리(T) 밖에있는 점을 추가하기 때문
            - 기본적으로 O(n^2) 알고리즘임
            - heap 구조를 이용하여 O(mlogn)으로 가능, 간선수가 O(n)아면 O(nlogn)

    1-3 최단경로찾기 -> 다익스트라
        - Prim 알고리즘과 기본적으로 매우 유사, 간선을 선택할때의 과정이 약간 다름
        - Prim알고리즘은 어디서부터 출발하는지에 대한 정보가 필요가없지만 다익스트라는 필요함
        - 확정 -> 완화의 과정이 반복됨 (새로운 더 짧은 경로를 찾았을 때)
        - 시험에서는 그래프와 알고리즘 진행상황을 보여주고 다음 확정되는 간선을 묻는 문제가 출제

    ※ 모든쌍 최단경로 다익스트라의 n번반복 -> O(n^2)의 다익스트라를 n번 반복? -> X, Prim처럼 heap구조를 사용하여 다익스트라를 O(nlogn)으로 구할 수 있음
    ※ Floyd-Warshall 사용으로 O(n^3)으로 가능 O(n^2logn)보다 느리지만 구현이 간결하고 일정 범위까지는 더 빠를수도 있음

    1-4 부분배낭문제 - partial
        - 단위 무게당 가치가 가장 높은것을 우선으로 담음
        - 가치를 정렬하는 시간 O(nlogn)이 시간복잡도

    ※ 부분적으로 담을 수 있는 배낭문제 -> 그리디
    ※ 배낭과 물건의 용량 비율을 정할 수 있다면 -> DP
    ※ 배낭의 용량이 매우 크고 용량의 비율을 나눌수 없다면 -> NP

    1-5 Set Cover
    - n개의 원소를 가진 집합 U에서 U의 부분집합들을 원소로하는 F가 있을떼 F를 최소한으로 골라서 U를 만드는 문제
    - NP-Complete 문제이므로 최적해를 구할수 없음 -> 그리디 알고리즘으로 근사해를 구함
    - 가장 많은 원소를 커버하는 부분집합부터 선택해나감
    - 시간복잡도는 O(n^3)

    1-6 작업 스케줄링
    - 시작시간을 이용하여 그리디로 근사해를 구할 수 있음
    - 시작시간을 정렬하는 시간 O(nlogn) + m개의 기계에 n개의 작업을 배정하는 O(mn)
    - 근사비율은 2.0

    ※ 시작과 끝시간이 알려져있다면 -> 그리디로 근사해 구함
    ※ 작업시간만 알려져있다면 NP

    1-7 허프만 압축
    - 빈도수에 따라서 이진코드의 길이를 다르게 주는것이 핵심 아이디어
    - 트리로 만들어서 결과가 반환되면 단말 노드에만 문자가 있고 그에 따라 이진코드를 매겨줌
    - 허프만 압축의 입력을 주고 결과를 묻는 문제가 출제됨
    - 시간복잡도는 O(nlogn)

2. DP: 입력크기가 작은 부분 문제들을 해결한 후에 그 해들을 이용하여 큰 크기의 부분 문제들을 해결하여 최종적으로 원래 주어진 입력의 문제를 해결
- 분할정복과 차이점: 부분문제의 해의 활용여부

    2-1. 모든쌍 최단경로 문제 Floyd-Warshall O(n^3) -> 다음에 갱신될 경로를 찾는 문제 출제
    2-2. 연속 행렬 곱셈 O(n^3) -> 진행상황을 주고 다음 상황을 찾는 문제 출제
    2-3. 0-1 배낭문제 O(nC)
    2-4. 동전 거스름돈




3. NP-Complete: 문제의 최적해를 다항식 시간 내에 구할수 없는 문제
- 기말고사에 NP-완전 문제들 간의 변환을 묻는 문제가 출제될 수 있음
- 또한 각 NP문제들에 대한 정의와 개요를 물을수도 있음




4. 근사 알고리즘 -> 최적해를 구할 수 없는 NP문제들을 근사한 해라도 구함
    - NP문제 해결을 위해선 다음 3가지중 하나를 포기해야함
        - 다항식 시간에 해를 찾는것
        - 모든 입력에 대해 해를 찾는것
        - 최적해를 찾는것
    - 근사 알고리즘은 3번째를 포기한 알고리즘
    - 근사해와 함께 근사 비율을 제시해야함. 최적해와 얼마나 근사한지 나타내는 비율이 근사비율
    - 최적해를 모르는데 근사비율을 구하는법 -> 간접적인 값을 활용하여 구함
    - 근사비율이 1.0에 가까울수록 정확도가 높음

    4-1. 여행자 문제 -> MST를 이용, 근사비율은 2.0
    4-2. 정점 커버 -> 집합커버를 이용, 근사비율은 k ln n
                 -> 극대 매칭을 이용, 근사비율은 2.0을 넘지않음
                        -> 극대매칭: 2개의 정점을 선택하고 두 정점에서 연결된 간선을 전부 지워버림
    4-3. 통채우기 -> 4가지의 그리디 방법: 최초적합, 최선적합, 최악적합, 다음적합 -> 근사비율은 전부 2.0
    4-4. 작업 스케줄링 -> 근사비율 2.0
    4-5. 클러스터링 -> 가장 큰 원의 반지름이 작을수록 잘 나눠진 답, 





















